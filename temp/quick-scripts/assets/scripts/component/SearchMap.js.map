{"version":3,"sources":["SearchMap.js"],"names":["Map","require","cc","Class","extends","properties","onLoad","node","active","gameConfig","isEditorMode","Pool","gridPool","setBuildFunc","gridNode","Node","sp","addComponent","Sprite","spriteFrame","atlas","getSpriteFrame","parent","labelNode","color","label","Label","string","fontSize","name","bind","setResetFunc","x","y","resMgr","getRes","resName","commonui","curPassData","passData","getCurPassData","commonConfig","getCommonConfig","searchDataArr","roadIdx","initMap","start","onDestroy","globalEvent","off","updateRoadPos","updateMapData","event","info","detail","updateMapPos","onEnable","on","updateMap","onDisable","nextRoad","length","reset","mapSize","setContentSize","w","h","mapInfo","configData","scale","posx","posy","oldLen","key","searchMapData","searchData","hasData","minTree","tree","row","rowData","col","colData","push","newLen","get","pos","getGridPosByRowCol","getComponent","dir","getDir","fromRow","fromCol","getChildByName"],"mappings":"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","file":"SearchMap.js","sourceRoot":"../../../../../assets/scripts/component","sourcesContent":["var Map = require(\"Map\")\ncc.Class({\n    extends: Map,\n\n    properties: {\n        \n    },\n\n    onLoad () {\n        this.node.active = cc.gameConfig.isEditorMode;\n        if(!this.node.active){\n            return;\n        }\n\n        var Pool = require(\"Pool\");\n        this.gridPool = new Pool();\n        this.gridPool.setBuildFunc(function(){\n            var gridNode = new cc.Node();\n            var sp = gridNode.addComponent(cc.Sprite);\n            sp.spriteFrame = this.atlas.getSpriteFrame(\"ui-frame-bg\");\n            gridNode.parent = this.node;\n\n            var labelNode = new cc.Node();\n            labelNode.color = cc.color(0,255,0);\n            var label = labelNode.addComponent(cc.Label);\n            label.string = \"\";\n            label.fontSize = 20;\n            labelNode.name = \"LabelNode\";\n            labelNode.parent = gridNode;\n            return gridNode;\n        }.bind(this));\n        this.gridPool.setResetFunc(function(gridNode){\n            gridNode.x = -100000;\n            gridNode.y = -100000;\n        }.bind(this));\n\n        this.atlas = cc.resMgr.getRes(cc.resName.commonui);\n\n        this.curPassData = cc.passData.getCurPassData();\n        this.commonConfig = cc.passData.getCommonConfig();\n        this.searchDataArr = [];\n        this.roadIdx = 0;\n        this.initMap();\n    },\n\n    start(){\n\n    },\n\n    onDestroy(){\n        cc.globalEvent.off(\"CurData:UpdateRoadPos\",this.updateRoadPos,this);\n        cc.globalEvent.off(\"CurData:UpdateMap\",this.updateMapData,this);\n    },\n\n    updateRoadPos(event){\n        var info = event.detail;\n        this.updateMapPos(info.x,info.y);\n    },\n\n    // update (dt) {},\n\n    onEnable () {\n        cc.globalEvent.on(\"CurData:UpdateRoadPos\",this.updateRoadPos,this);\n        cc.globalEvent.on(\"CurData:UpdateMap\",this.updateMap,this);\n        cc.globalEvent.on(\"CurData:InitGameData\",this.initMap,this);\n        this.updateMap();\n    },\n\n    onDisable(){\n        cc.globalEvent.off(\"CurData:UpdateRoadPos\",this.updateRoadPos,this);\n        cc.globalEvent.off(\"CurData:UpdateMap\",this.updateMap,this);\n        cc.globalEvent.off(\"CurData:InitGameData\",this.initMap,this);\n    },\n\n    nextRoad(){\n        this.roadIdx++;\n        if(this.roadIdx>=this.searchDataArr.length){\n            this.roadIdx = 0;\n        }\n        this.updateMap();\n    },\n\n    initMap(){\n        this.gridPool.reset();\n\n        var mapSize = this.curPassData.mapSize;\n        this.node.setContentSize(mapSize.w,mapSize.h); \n\n        var mapInfo = this.curPassData.configData.mapInfo;\n        this.node.scale = mapInfo.scale;\n        this.updateMapPos(mapInfo.posx,mapInfo.posy);\n\n        this.updateMapData();\n    },\n\n    updateMapData(){\n        var oldLen = this.searchDataArr.length;\n        this.searchDataArr = [];\n        for(var key in this.curPassData.searchMapData){\n            var searchData = this.curPassData.searchMapData[key];\n            if(searchData){\n                var hasData = false;\n                var minTree = searchData.tree;\n                for(var row in minTree){\n                    var rowData = minTree[row];\n                    if(!rowData)continue;\n                    for(var col in rowData){\n                        var colData = rowData[col];\n                        if(!colData)continue;\n                        hasData = true;\n                    }\n                }\n                if(hasData){\n                    this.searchDataArr.push(searchData);\n                }\n            }\n        }\n        var newLen = this.searchDataArr.length;\n        if(newLen!=oldLen){\n            this.roadIdx = 0;\n        }\n        this.updateMap();\n    },\n\n    updateMap(){\n        if(!this.node.active)return;\n        this.gridPool.reset();\n\n        var searchData = this.searchDataArr[this.roadIdx];\n        if(!searchData)return;\n        var minTree = searchData.tree;\n\n        for(var row in minTree){\n            var rowData = minTree[row];\n            if(!rowData)continue;\n\n            for(var col in rowData){\n                var colData = rowData[col];\n                if(!colData)continue;\n\n                var gridNode = this.gridPool.get();\n                var pos = this.curPassData.getGridPosByRowCol(row,col);\n                gridNode.x = pos.x;\n                gridNode.y = pos.y;\n                var sp = gridNode.getComponent(cc.Sprite);\n                var dir = this.curPassData.getDir(row,col,colData.fromRow,colData.fromCol);\n                if(dir){\n                    if(dir==\"-1\"){\n                        sp.spriteFrame = this.atlas.getSpriteFrame(\"testui-self\");\n                    }else if(dir==\"-2\"){\n                        sp.spriteFrame = this.atlas.getSpriteFrame(\"testui-jump\");\n                    }else{\n                        sp.spriteFrame = this.atlas.getSpriteFrame(\"testui-dir\"+dir);\n                    }\n                }else{\n                    sp.spriteFrame = this.atlas.getSpriteFrame(\"ui-frame-bg\");\n                }\n                var label = gridNode.getChildByName(\"LabelNode\").getComponent(cc.Label);\n                label.string = row+\":\"+col+\"\\n\";\n            }\n        }\n    },\n\n    \n});\n"]}